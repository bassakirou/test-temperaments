// API route Vercel pour servir la configuration de mani√®re s√©curis√©e
// Cette route permet d'acc√©der aux variables d'environnement c√¥t√© serveur
// et de les transmettre au client de mani√®re contr√¥l√©e

export default function handler(req, res) {
  // V√©rifier que c'est une requ√™te GET
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'M√©thode non autoris√©e' });
  }

  try {
    // R√©cup√©rer la cl√© API depuis les variables d'environnement Vercel
    const apiKey = process.env.VITE_GROQ_API_KEY || process.env.GROQ_API_KEY;

    // Log pour le d√©bogage (sans exposer la cl√© compl√®te)
    console.log('üîç API Route - V√©rification de la cl√© API:');
    console.log('- VITE_GROQ_API_KEY d√©finie:', !!process.env.VITE_GROQ_API_KEY);
    console.log('- GROQ_API_KEY d√©finie:', !!process.env.GROQ_API_KEY);
    console.log('- Cl√© finale trouv√©e:', !!apiKey);
    
    if (apiKey) {
      console.log('- Longueur de la cl√©:', apiKey.length);
      console.log('- Pr√©fixe de la cl√©:', apiKey.substring(0, 4) + '...');
    }

    // V√©rifier que la cl√© API est valide
    if (!apiKey || apiKey.trim() === '') {
      console.warn('‚ö†Ô∏è Aucune cl√© API trouv√©e dans les variables d\'environnement');
      return res.status(200).json({ 
        success: false,
        error: 'Cl√© API non configur√©e',
        debug: {
          hasViteKey: !!process.env.VITE_GROQ_API_KEY,
          hasGroqKey: !!process.env.GROQ_API_KEY,
          environment: process.env.NODE_ENV || 'unknown'
        }
      });
    }

    // V√©rifier le format de la cl√© (doit commencer par "gsk_")
    if (!apiKey.startsWith('gsk_')) {
      console.warn('‚ö†Ô∏è Format de cl√© API invalide');
      return res.status(200).json({ 
        success: false,
        error: 'Format de cl√© API invalide',
        debug: {
          keyPrefix: apiKey.substring(0, 4),
          keyLength: apiKey.length
        }
      });
    }

    // Retourner la cl√© API de mani√®re s√©curis√©e
    console.log('‚úÖ Cl√© API servie avec succ√®s');
    return res.status(200).json({
      success: true,
      apiKey: apiKey,
      debug: {
        keyLength: apiKey.length,
        keyPrefix: apiKey.substring(0, 4) + '...',
        environment: process.env.NODE_ENV || 'production'
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur dans l\'API route:', error);
    return res.status(500).json({ 
      success: false,
      error: 'Erreur serveur',
      message: error.message 
    });
  }
}